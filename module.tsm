{
  "type": "module",
  "appVersion": "1.15.0",
  "properties": {
    "meta": {
      "showingComment": true,
      "comment": {
        "markdown": {
          "text": {
            "text": "##### INFO\n\nModule defines variables, keys and nested keys used in a dataflow or controlflow.\n\nDefined here to avoid hardcoding of keys in the flow and to promote re-usage.",
            "syntax": "markdown",
            "size": {
              "width": "100%",
              "height": "100%"
            }
          },
          "size": {
            "width": null,
            "height": 160
          },
          "view": "edit"
        },
        "editor": {
          "collapsed": false
        }
      },
      "role": "config"
    },
    "variables": {
      "variables": {
        "list": [
          {
            "name": "step_type_runflow",
            "type": "any",
            "value": {
              "widgetType": "expression/string",
              "widgetData": {
                "interpolation": true,
                "text": "com.twineworks.tweakstreet.library.steps.map.runflow"
              },
              "code": "'com.twineworks.tweakstreet.library.steps.map.runflow'"
            }
          },
          {
            "name": "data_flow_key_appversion",
            "type": "any",
            "value": {
              "widgetType": "expression/code",
              "widgetData": {
                "text": ":appVersion",
                "size": {
                  "width": 0,
                  "height": 36
                },
                "syntax": "tweakflow"
              },
              "code": ":appVersion"
            }
          },
          {
            "name": "data_flow_key_properties",
            "type": "any",
            "value": {
              "widgetType": "expression/code",
              "widgetData": {
                "text": ":properties",
                "size": {
                  "width": 0,
                  "height": 36
                },
                "syntax": "tweakflow"
              },
              "code": ":properties"
            }
          },
          {
            "name": "dataflow_key_services",
            "type": "any",
            "value": {
              "widgetType": "expression/code",
              "widgetData": {
                "text": "[:properties, :services, :services, :list]",
                "size": {
                  "width": 0,
                  "height": 36
                },
                "syntax": "tweakflow"
              },
              "code": "[:properties, :services, :services, :list]"
            }
          },
          {
            "name": "data_flow_key_steps",
            "type": "any",
            "value": {
              "widgetType": "expression/code",
              "widgetData": {
                "text": ":steps",
                "size": {
                  "width": 0,
                  "height": 36
                },
                "syntax": "tweakflow"
              },
              "code": ":steps"
            }
          },
          {
            "name": "data_flow_key_hops",
            "type": "any",
            "value": {
              "widgetType": "expression/code",
              "widgetData": {
                "text": ":hops",
                "size": {
                  "width": 0,
                  "height": 36
                },
                "syntax": "tweakflow"
              },
              "code": ":hops"
            }
          },
          {
            "name": "step_key_type",
            "type": "any",
            "value": {
              "widgetType": "expression/code",
              "widgetData": {
                "text": ":type",
                "size": {
                  "width": 0,
                  "height": 36
                },
                "syntax": "tweakflow"
              },
              "code": ":type"
            }
          },
          {
            "name": "service_key_category",
            "type": "any",
            "value": {
              "widgetType": "expression/code",
              "widgetData": {
                "text": ":category",
                "size": {
                  "width": 0,
                  "height": 36
                },
                "syntax": "tweakflow"
              },
              "code": ":category"
            }
          },
          {
            "name": "step_key_flowpath",
            "type": "any",
            "value": {
              "widgetType": "expression/code",
              "widgetData": {
                "text": "[:data, :flowPath, :widgetData, :text]",
                "size": {
                  "width": 0,
                  "height": 36
                },
                "syntax": "tweakflow"
              },
              "code": "[:data, :flowPath, :widgetData, :text]"
            }
          },
          {
            "name": "step_key_flowpath_path",
            "type": "any",
            "value": {
              "widgetType": "expression/code",
              "widgetData": {
                "text": "# the key \"path\" is not existing in the dataflow or controlflie file. it is the \n# absolute path to a flow in the Run Flow step. it is appended to the dict\n# because it is used in the cypher query to create a relationship\n[:data, :flowPath, :widgetData, :path]",
                "size": {
                  "width": 0,
                  "height": 105
                },
                "syntax": "tweakflow"
              },
              "code": "# the key \"path\" is not existing in the dataflow or controlflie file. it is the \n# absolute path to a flow in the Run Flow step. it is appended to the dict\n# because it is used in the cypher query to create a relationship\n[:data, :flowPath, :widgetData, :path]\n"
            }
          }
        ]
      },
      "editor": {
        "collapsed": false
      }
    },
    "services": {
      "services": {
        "list": []
      },
      "editor": {
        "collapsed": false
      }
    },
    "imports": {
      "code": "# import the standard library\n# import core, data, strings, time, math, fun, locale, regex, bin, decimals from 'std';\n",
      "size": {
        "width": 0,
        "height": 64
      },
      "editor": {
        "collapsed": false
      }
    },
    "editor": {
      "showVariables": true,
      "showServices": true,
      "dialogWidth": "wide"
    },
    "model": {}
  }
}