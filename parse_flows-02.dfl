{
  "type": "data-flow",
  "appVersion": "1.15.0",
  "properties": {
    "meta": {
      "comment": {
        "markdown": {
          "text": {
            "text": "",
            "syntax": "markdown",
            "size": {
              "width": "100%",
              "height": "100%"
            }
          },
          "size": {
            "width": null,
            "height": 160
          },
          "view": "edit"
        },
        "editor": {
          "collapsed": true
        }
      },
      "showingComment": true
    },
    "editor": {
      "showParameters": true,
      "showVariables": true,
      "showServices": true,
      "dialogWidth": "wide"
    },
    "imports": {
      "code": "import core, data, strings, time, math, fun, locale, regex, bin, decimals from 'std';",
      "size": {
        "width": 0,
        "height": 102
      },
      "editor": {
        "collapsed": false
      }
    },
    "parameters": {
      "parameters": {
        "list": []
      },
      "editor": {
        "collapsed": false
      }
    },
    "variables": {
      "variables": {
        "list": []
      },
      "editor": {
        "collapsed": false
      }
    },
    "services": {
      "services": {
        "list": []
      },
      "editor": {
        "collapsed": false
      }
    }
  },
  "steps": [
    {
      "id": "com.twineworks.tweakstreet.library.steps.bool.filter_9014af37-436e-4bd0-8617-6bccab651df6",
      "name": "Filter: Controlflows only",
      "type": "com.twineworks.tweakstreet.library.steps.bool.filter",
      "instanceCount": {
        "widgetType": "expression/number",
        "widgetData": {
          "text": "1"
        },
        "code": "1"
      },
      "data": {
        "meta": {
          "name": "Filter: Controlflows only",
          "showingComment": false,
          "comment": {
            "markdown": {
              "text": {
                "text": "",
                "syntax": "markdown",
                "size": {
                  "width": "100%",
                  "height": "100%"
                }
              },
              "size": {
                "width": null,
                "height": 160
              },
              "view": "edit"
            },
            "editor": {
              "collapsed": true
            }
          }
        },
        "entryVariables": {
          "variables": {
            "list": []
          },
          "editor": {
            "collapsed": false
          }
        },
        "condition": {
          "widgetType": "expression/code",
          "widgetData": {
            "text": "!in.isDataflow",
            "size": {
              "width": 0,
              "height": 36
            },
            "syntax": "tweakflow"
          },
          "code": "!in.isDataflow"
        },
        "editor": {
          "showEntryVariables": false
        },
        "model": {}
      },
      "pos": {
        "x": 346,
        "y": 122
      }
    },
    {
      "id": "com.twineworks.tweakstreet.library.steps.map.httprequest_c9cbaf2e-55da-4165-9757-43e7c0ac201d",
      "name": "Neo4j: create Controlflows",
      "type": "com.twineworks.tweakstreet.library.steps.map.httprequest",
      "instanceCount": {
        "widgetType": "expression/number",
        "widgetData": {
          "text": "1"
        },
        "code": "1"
      },
      "data": {
        "meta": {
          "name": "Neo4j: create Controlflows",
          "showingComment": true,
          "comment": {
            "markdown": {
              "text": {
                "text": "",
                "syntax": "markdown",
                "size": {
                  "width": "100%",
                  "height": "100%"
                }
              },
              "size": {
                "width": null,
                "height": 160
              },
              "view": "edit"
            },
            "editor": {
              "collapsed": true
            }
          }
        },
        "entryVariables": {
          "variables": {
            "list": [
              {
                "name": "toJSON",
                "type": "function",
                "value": {
                  "widgetType": "expression/encode-json",
                  "widgetData": {
                    "prettyPrint": {
                      "widgetType": "expression/checkbox-boolean",
                      "widgetData": {
                        "value": true
                      },
                      "code": "true"
                    },
                    "datetimeFormatter": {
                      "widgetType": "expression/format-datetime",
                      "widgetData": {
                        "pattern": {
                          "widgetType": "expression/datetime-pattern",
                          "widgetData": {
                            "value": "uuuu-MM-dd'T'HH:mm:ss.SSS[ZZZZZ]"
                          },
                          "code": "'uuuu-MM-dd''T''HH:mm:ss.SSS[ZZZZZ]'"
                        },
                        "locale": {
                          "widgetType": "expression/locale",
                          "widgetData": {
                            "value": "en-US"
                          },
                          "code": "'en-US'"
                        },
                        "nilValue": {
                          "widgetType": "expression/nil",
                          "widgetData": {},
                          "code": "nil"
                        },
                        "editor": {
                          "collapsed": true
                        },
                        "model": {}
                      },
                      "code": "let {\n  make_formatter: (string pattern, string locale, string nilValue) -> function via {:class 'com.twineworks.tweakstreet.library.conversion.Formatters$datetime_formatter'};\n}\nmake_formatter('uuuu-MM-dd''T''HH:mm:ss.SSS[ZZZZZ]', 'en-US', nil)\n"
                    },
                    "editor": {
                      "collapsed": true
                    },
                    "model": {}
                  },
                  "code": "let {\n  pretty_print: true;\n  datetime_formatter: let {\n  make_formatter: (string pattern, string locale, string nilValue) -> function via {:class 'com.twineworks.tweakstreet.library.conversion.Formatters$datetime_formatter'};\n}\nmake_formatter('uuuu-MM-dd''T''HH:mm:ss.SSS[ZZZZZ]', 'en-US', nil)\n;\n  make_encoder: (boolean pretty_print, function date_encoder, function binary_encoder) -> function via {:class 'com.twineworks.tweakstreet.library.json.Json$encoder'};\n}\nmake_encoder(pretty_print, datetime_formatter, nil)\n"
                }
              },
              {
                "name": "statement",
                "type": "string",
                "value": {
                  "widgetType": "expression/text",
                  "widgetData": {
                    "text": "MERGE (c:Controlflow {name: $filename, path: $path})\nset\n  c.unique_steps = $number_of_unique_steps,\n  c.unique_services = $number_of_unique_services,\n  c.last_modified = $last_modified,\n  c.version = $version\n\n",
                    "size": {
                      "width": 0,
                      "height": 159
                    },
                    "syntax": "ruby",
                    "lineSeparator": "\n",
                    "interpolation": true
                  },
                  "code": "'MERGE (c:Controlflow {name: $filename, path: $path})\nset\n  c.unique_steps = $number_of_unique_steps,\n  c.unique_services = $number_of_unique_services,\n  c.last_modified = $last_modified,\n  c.version = $version\n\n'"
                }
              },
              {
                "name": "parameters",
                "type": "any",
                "value": {
                  "widgetType": "expression/dict",
                  "widgetData": {
                    "table": {
                      "list": [
                        {
                          "key": {
                            "widgetType": "expression/string",
                            "widgetData": {
                              "interpolation": true,
                              "text": "filename"
                            },
                            "code": "'filename'"
                          },
                          "value": {
                            "widgetType": "expression/field-value-ref",
                            "widgetData": {
                              "fieldSelect": {
                                "value": {
                                  "gate": "in",
                                  "name": "filename"
                                }
                              }
                            },
                            "code": "::in.filename"
                          }
                        },
                        {
                          "key": {
                            "widgetType": "expression/string",
                            "widgetData": {
                              "interpolation": true,
                              "text": "version"
                            },
                            "code": "'version'"
                          },
                          "value": {
                            "widgetType": "expression/field-value-ref",
                            "widgetData": {
                              "fieldSelect": {
                                "value": {
                                  "gate": "in",
                                  "name": "version"
                                }
                              }
                            },
                            "code": "::in.version"
                          }
                        },
                        {
                          "key": {
                            "widgetType": "expression/string",
                            "widgetData": {
                              "interpolation": true,
                              "text": "path"
                            },
                            "code": "'path'"
                          },
                          "value": {
                            "widgetType": "expression/field-value-ref",
                            "widgetData": {
                              "fieldSelect": {
                                "value": {
                                  "gate": "in",
                                  "name": "path_only"
                                }
                              }
                            },
                            "code": "::in.path_only"
                          }
                        },
                        {
                          "key": {
                            "widgetType": "expression/string",
                            "widgetData": {
                              "interpolation": true,
                              "text": "number_of_unique_steps"
                            },
                            "code": "'number_of_unique_steps'"
                          },
                          "value": {
                            "widgetType": "expression/field-value-ref",
                            "widgetData": {
                              "fieldSelect": {
                                "value": {
                                  "gate": "in",
                                  "name": "number_of_unique_steps"
                                }
                              }
                            },
                            "code": "::in.number_of_unique_steps"
                          }
                        },
                        {
                          "key": {
                            "widgetType": "expression/string",
                            "widgetData": {
                              "interpolation": true,
                              "text": "number_of_unique_services"
                            },
                            "code": "'number_of_unique_services'"
                          },
                          "value": {
                            "widgetType": "expression/field-value-ref",
                            "widgetData": {
                              "fieldSelect": {
                                "value": {
                                  "gate": "in",
                                  "name": "number_of_unique_services"
                                }
                              }
                            },
                            "code": "::in.number_of_unique_services"
                          }
                        },
                        {
                          "key": {
                            "widgetType": "expression/string",
                            "widgetData": {
                              "interpolation": true,
                              "text": "last_modified"
                            },
                            "code": "'last_modified'"
                          },
                          "value": {
                            "widgetType": "expression/field-value-ref",
                            "widgetData": {
                              "fieldSelect": {
                                "value": {
                                  "gate": "in",
                                  "name": "last_modified"
                                }
                              }
                            },
                            "code": "::in.last_modified"
                          }
                        }
                      ]
                    }
                  },
                  "code": "{\n  'filename' ::in.filename,\n  'version' ::in.version,\n  'path' ::in.path_only,\n  'number_of_unique_steps' ::in.number_of_unique_steps,\n  'number_of_unique_services' ::in.number_of_unique_services,\n  'last_modified' ::in.last_modified\n}"
                }
              }
            ]
          },
          "editor": {
            "collapsed": false
          }
        },
        "tabs": {},
        "method": {
          "widgetType": "expression/select",
          "widgetData": {
            "family": "expression/select/httpMethod",
            "value": "POST"
          },
          "code": "'POST'"
        },
        "url": {
          "widgetType": "expression/string",
          "widgetData": {
            "interpolation": true,
            "text": "http://localhost:7474/db/neo4j/tx/commit"
          },
          "code": "'http://localhost:7474/db/neo4j/tx/commit'"
        },
        "urlParameters": {
          "widgetType": "expression/data-grid",
          "widgetData": {
            "fields": [
              {
                "id": "name",
                "name": "name"
              },
              {
                "id": "value",
                "name": "value"
              }
            ],
            "gen": {
              "as": "rows",
              "of": "dict",
              "meta": false
            },
            "table": {
              "list": []
            }
          },
          "code": "[]"
        },
        "authUser": {
          "widgetType": "expression/string",
          "widgetData": {
            "interpolation": true,
            "text": "neo4j"
          },
          "code": "'neo4j'"
        },
        "authPassword": {
          "widgetType": "expression/password",
          "widgetData": {
            "text": "encrypted: DLdp/xMKY6XLOTdXgA4LcDQ1nOlouElbnBtcip+9ex+695hk1Q==",
            "encrypted": true
          },
          "code": "'encrypted: DLdp/xMKY6XLOTdXgA4LcDQ1nOlouElbnBtcip+9ex+695hk1Q=='"
        },
        "oauth": {
          "widgetType": "expression/oauth-ref",
          "widgetData": {
            "name": ""
          },
          "code": "nil"
        },
        "headers": {
          "widgetType": "expression/data-grid",
          "widgetData": {
            "fields": [
              {
                "id": "name",
                "name": "name"
              },
              {
                "id": "value",
                "name": "value"
              }
            ],
            "gen": {
              "as": "rows",
              "of": "dict",
              "meta": false
            },
            "table": {
              "list": []
            }
          },
          "code": "[]"
        },
        "cookies": {
          "widgetType": "expression/field-value-ref",
          "widgetData": {
            "fieldSelect": {
              "value": null
            }
          },
          "code": "nil"
        },
        "contentType": {
          "widgetType": "expression/select",
          "widgetData": {
            "family": "expression/select/httpContentType",
            "value": "application/json"
          },
          "code": "'application/json'"
        },
        "bodyParameters": {
          "widgetType": "expression/data-grid",
          "widgetData": {
            "fields": [
              {
                "id": "name",
                "name": "name"
              },
              {
                "id": "value",
                "name": "value"
              }
            ],
            "gen": {
              "as": "rows",
              "of": "dict",
              "meta": false
            },
            "table": {
              "list": []
            }
          },
          "code": "[]"
        },
        "body": {
          "widgetType": "expression/code",
          "widgetData": {
            "text": "vars.toJSON({\r\n  :statements [{\r\n    :statement vars.statement,\r\n    :parameters vars.parameters\r\n  }]\r\n})",
            "size": {
              "width": 0,
              "height": 136
            },
            "syntax": "tweakflow"
          },
          "code": "vars.toJSON({\r\n  :statements [{\r\n    :statement vars.statement,\r\n    :parameters vars.parameters\r\n  }]\r\n})"
        },
        "followRedirects": {
          "widgetType": "expression/checkbox-boolean",
          "widgetData": {
            "value": true
          },
          "code": "true"
        },
        "bodyCapture": {
          "widgetType": "expression/select",
          "widgetData": {
            "family": "com.twineworks.tweakstreet.library.steps.map.httprequest/bodyCapture",
            "value": "capture_string"
          },
          "code": "'capture_string'"
        },
        "saveAsFile": {
          "widgetType": "expression/local-file",
          "widgetData": {
            "interpolation": true,
            "text": "",
            "dialogIntent": "openFile"
          },
          "code": "''"
        },
        "resultVariables": {
          "variables": {
            "list": [
              {
                "name": "response",
                "type": "any",
                "value": {
                  "widgetType": "expression/result-ref",
                  "widgetData": {
                    "value": "::results.response_json"
                  },
                  "code": "::results.response_json"
                }
              },
              {
                "name": "ensure_success",
                "type": "any",
                "value": {
                  "widgetType": "expression/code",
                  "widgetData": {
                    "text": "if response[:errors] \n  throw [\"error importing dataflows\", response]\nelse\n  :ok",
                    "size": {
                      "width": 0,
                      "height": 101
                    },
                    "syntax": "tweakflow"
                  },
                  "code": "if response[:errors] \n  throw [\"error importing dataflows\", response]\nelse\n  :ok"
                }
              }
            ]
          },
          "editor": {
            "collapsed": false
          }
        },
        "outputFields": {
          "outputFields": {
            "list": []
          },
          "editor": {
            "collapsed": false
          }
        },
        "editor": {
          "showEntryVariables": true,
          "showResultVariables": true,
          "showOutputFields": true,
          "dialogWidth": "wide"
        },
        "model": {}
      },
      "pos": {
        "x": 618,
        "y": 122
      }
    },
    {
      "id": "com.twineworks.tweakstreet.library.steps.map.httprequest_cfb63c64-b788-429f-80e7-f6f5b2e2c536",
      "name": "Neo4j: merge Run Flow Controlflows and Dataflows",
      "type": "com.twineworks.tweakstreet.library.steps.map.httprequest",
      "instanceCount": {
        "widgetType": "expression/number",
        "widgetData": {
          "text": "1"
        },
        "code": "1"
      },
      "data": {
        "meta": {
          "name": "Neo4j: merge Run Flow Controlflows and Dataflows",
          "showingComment": true,
          "comment": {
            "markdown": {
              "text": {
                "text": "",
                "syntax": "markdown",
                "size": {
                  "width": "100%",
                  "height": "100%"
                }
              },
              "size": {
                "width": null,
                "height": 160
              },
              "view": "edit"
            },
            "editor": {
              "collapsed": true
            }
          }
        },
        "entryVariables": {
          "variables": {
            "list": [
              {
                "name": "toJSON",
                "type": "function",
                "value": {
                  "widgetType": "expression/encode-json",
                  "widgetData": {
                    "prettyPrint": {
                      "widgetType": "expression/checkbox-boolean",
                      "widgetData": {
                        "value": true
                      },
                      "code": "true"
                    },
                    "datetimeFormatter": {
                      "widgetType": "expression/format-datetime",
                      "widgetData": {
                        "pattern": {
                          "widgetType": "expression/datetime-pattern",
                          "widgetData": {
                            "value": "uuuu-MM-dd'T'HH:mm:ss.SSS[ZZZZZ]"
                          },
                          "code": "'uuuu-MM-dd''T''HH:mm:ss.SSS[ZZZZZ]'"
                        },
                        "locale": {
                          "widgetType": "expression/locale",
                          "widgetData": {
                            "value": "en-US"
                          },
                          "code": "'en-US'"
                        },
                        "nilValue": {
                          "widgetType": "expression/nil",
                          "widgetData": {},
                          "code": "nil"
                        },
                        "editor": {
                          "collapsed": true
                        },
                        "model": {}
                      },
                      "code": "let {\n  make_formatter: (string pattern, string locale, string nilValue) -> function via {:class 'com.twineworks.tweakstreet.library.conversion.Formatters$datetime_formatter'};\n}\nmake_formatter('uuuu-MM-dd''T''HH:mm:ss.SSS[ZZZZZ]', 'en-US', nil)\n"
                    },
                    "editor": {
                      "collapsed": true
                    },
                    "model": {}
                  },
                  "code": "let {\n  pretty_print: true;\n  datetime_formatter: let {\n  make_formatter: (string pattern, string locale, string nilValue) -> function via {:class 'com.twineworks.tweakstreet.library.conversion.Formatters$datetime_formatter'};\n}\nmake_formatter('uuuu-MM-dd''T''HH:mm:ss.SSS[ZZZZZ]', 'en-US', nil)\n;\n  make_encoder: (boolean pretty_print, function date_encoder, function binary_encoder) -> function via {:class 'com.twineworks.tweakstreet.library.json.Json$encoder'};\n}\nmake_encoder(pretty_print, datetime_formatter, nil)\n"
                }
              },
              {
                "name": "statement",
                "type": "string",
                "value": {
                  "widgetType": "expression/text",
                  "widgetData": {
                    "text": "UNWIND $steps AS step\n  MERGE (s:Step {type: split(step.type,\".\")[-1]})\n  with s, step\n  MATCH (c:Controlflow {name: $filename, path: $path})\n  MATCH (d:Dataflow {name: split(step.data.flowPath.widgetData.text,\"/\")[-1], path: step.data.flowPath.widgetData.path})\n  MERGE (c)-[:usec]->(s)\n  MERGE (c)-[:uses]->(d)\n",
                    "size": {
                      "width": 0,
                      "height": 164
                    },
                    "syntax": "ruby",
                    "lineSeparator": "\n",
                    "interpolation": true
                  },
                  "code": "'UNWIND $steps AS step\n  MERGE (s:Step {type: split(step.type,\".\")[-1]})\n  with s, step\n  MATCH (c:Controlflow {name: $filename, path: $path})\n  MATCH (d:Dataflow {name: split(step.data.flowPath.widgetData.text,\"/\")[-1], path: step.data.flowPath.widgetData.path})\n  MERGE (c)-[:usec]->(s)\n  MERGE (c)-[:uses]->(d)\n'"
                }
              },
              {
                "name": "parameters",
                "type": "any",
                "value": {
                  "widgetType": "expression/dict",
                  "widgetData": {
                    "table": {
                      "list": [
                        {
                          "key": {
                            "widgetType": "expression/string",
                            "widgetData": {
                              "interpolation": true,
                              "text": "steps"
                            },
                            "code": "'steps'"
                          },
                          "value": {
                            "widgetType": "expression/field-value-ref",
                            "widgetData": {
                              "fieldSelect": {
                                "value": {
                                  "gate": "in",
                                  "name": "runflow_steps"
                                }
                              }
                            },
                            "code": "::in.runflow_steps"
                          }
                        },
                        {
                          "key": {
                            "widgetType": "expression/string",
                            "widgetData": {
                              "interpolation": true,
                              "text": "filename"
                            },
                            "code": "'filename'"
                          },
                          "value": {
                            "widgetType": "expression/field-value-ref",
                            "widgetData": {
                              "fieldSelect": {
                                "value": {
                                  "gate": "in",
                                  "name": "filename"
                                }
                              }
                            },
                            "code": "::in.filename"
                          }
                        },
                        {
                          "key": {
                            "widgetType": "expression/string",
                            "widgetData": {
                              "interpolation": true,
                              "text": "path"
                            },
                            "code": "'path'"
                          },
                          "value": {
                            "widgetType": "expression/field-value-ref",
                            "widgetData": {
                              "fieldSelect": {
                                "value": {
                                  "gate": "in",
                                  "name": "path_only"
                                }
                              }
                            },
                            "code": "::in.path_only"
                          }
                        }
                      ]
                    }
                  },
                  "code": "{\n  'steps' ::in.runflow_steps,\n  'filename' ::in.filename,\n  'path' ::in.path_only\n}"
                }
              }
            ]
          },
          "editor": {
            "collapsed": false
          }
        },
        "tabs": {},
        "method": {
          "widgetType": "expression/select",
          "widgetData": {
            "family": "expression/select/httpMethod",
            "value": "POST"
          },
          "code": "'POST'"
        },
        "url": {
          "widgetType": "expression/string",
          "widgetData": {
            "interpolation": true,
            "text": "http://localhost:7474/db/neo4j/tx/commit"
          },
          "code": "'http://localhost:7474/db/neo4j/tx/commit'"
        },
        "urlParameters": {
          "widgetType": "expression/data-grid",
          "widgetData": {
            "fields": [
              {
                "id": "name",
                "name": "name"
              },
              {
                "id": "value",
                "name": "value"
              }
            ],
            "gen": {
              "as": "rows",
              "of": "dict",
              "meta": false
            },
            "table": {
              "list": []
            }
          },
          "code": "[]"
        },
        "authUser": {
          "widgetType": "expression/string",
          "widgetData": {
            "interpolation": true,
            "text": "neo4j"
          },
          "code": "'neo4j'"
        },
        "authPassword": {
          "widgetType": "expression/password",
          "widgetData": {
            "text": "encrypted: DLdp/xMKY6XLOTdXgA4LcDQ1nOlouElbnBtcip+9ex+695hk1Q==",
            "encrypted": true
          },
          "code": "'encrypted: DLdp/xMKY6XLOTdXgA4LcDQ1nOlouElbnBtcip+9ex+695hk1Q=='"
        },
        "oauth": {
          "widgetType": "expression/oauth-ref",
          "widgetData": {
            "name": ""
          },
          "code": "nil"
        },
        "headers": {
          "widgetType": "expression/data-grid",
          "widgetData": {
            "fields": [
              {
                "id": "name",
                "name": "name"
              },
              {
                "id": "value",
                "name": "value"
              }
            ],
            "gen": {
              "as": "rows",
              "of": "dict",
              "meta": false
            },
            "table": {
              "list": []
            }
          },
          "code": "[]"
        },
        "cookies": {
          "widgetType": "expression/field-value-ref",
          "widgetData": {
            "fieldSelect": {
              "value": null
            }
          },
          "code": "nil"
        },
        "contentType": {
          "widgetType": "expression/select",
          "widgetData": {
            "family": "expression/select/httpContentType",
            "value": "application/json"
          },
          "code": "'application/json'"
        },
        "bodyParameters": {
          "widgetType": "expression/data-grid",
          "widgetData": {
            "fields": [
              {
                "id": "name",
                "name": "name"
              },
              {
                "id": "value",
                "name": "value"
              }
            ],
            "gen": {
              "as": "rows",
              "of": "dict",
              "meta": false
            },
            "table": {
              "list": []
            }
          },
          "code": "[]"
        },
        "body": {
          "widgetType": "expression/code",
          "widgetData": {
            "text": "vars.toJSON({\r\n  :statements [{\r\n    :statement vars.statement,\r\n    :parameters vars.parameters\r\n  }]\r\n})",
            "size": {
              "width": 0,
              "height": 136
            },
            "syntax": "tweakflow"
          },
          "code": "vars.toJSON({\r\n  :statements [{\r\n    :statement vars.statement,\r\n    :parameters vars.parameters\r\n  }]\r\n})"
        },
        "followRedirects": {
          "widgetType": "expression/checkbox-boolean",
          "widgetData": {
            "value": true
          },
          "code": "true"
        },
        "bodyCapture": {
          "widgetType": "expression/select",
          "widgetData": {
            "family": "com.twineworks.tweakstreet.library.steps.map.httprequest/bodyCapture",
            "value": "capture_string"
          },
          "code": "'capture_string'"
        },
        "saveAsFile": {
          "widgetType": "expression/local-file",
          "widgetData": {
            "interpolation": true,
            "text": "",
            "dialogIntent": "openFile"
          },
          "code": "''"
        },
        "resultVariables": {
          "variables": {
            "list": [
              {
                "name": "response",
                "type": "any",
                "value": {
                  "widgetType": "expression/result-ref",
                  "widgetData": {
                    "value": "::results.response_json"
                  },
                  "code": "::results.response_json"
                }
              },
              {
                "name": "ensure_success",
                "type": "any",
                "value": {
                  "widgetType": "expression/code",
                  "widgetData": {
                    "text": "if response[:errors] \n  throw [\"error importing steps\", response]\nelse\n  :ok",
                    "size": {
                      "width": 0,
                      "height": 101
                    },
                    "syntax": "tweakflow"
                  },
                  "code": "if response[:errors] \n  throw [\"error importing steps\", response]\nelse\n  :ok"
                }
              }
            ]
          },
          "editor": {
            "collapsed": false
          }
        },
        "outputFields": {
          "outputFields": {
            "list": []
          },
          "editor": {
            "collapsed": false
          }
        },
        "editor": {
          "showEntryVariables": true,
          "showResultVariables": true,
          "showOutputFields": true,
          "dialogWidth": "stretch"
        },
        "model": {}
      },
      "pos": {
        "x": 922,
        "y": 458
      }
    },
    {
      "id": "com.twineworks.tweakstreet.library.steps.map.httprequest_46e2bde8-b0f6-4d89-89e8-2844a42e6bed",
      "name": "Neo4j: merge other Steps and Controlflows",
      "type": "com.twineworks.tweakstreet.library.steps.map.httprequest",
      "instanceCount": {
        "widgetType": "expression/number",
        "widgetData": {
          "text": "1"
        },
        "code": "1"
      },
      "data": {
        "meta": {
          "name": "Neo4j: merge other Steps and Controlflows",
          "showingComment": true,
          "comment": {
            "markdown": {
              "text": {
                "text": "",
                "syntax": "markdown",
                "size": {
                  "width": "100%",
                  "height": "100%"
                }
              },
              "size": {
                "width": null,
                "height": 160
              },
              "view": "edit"
            },
            "editor": {
              "collapsed": true
            }
          }
        },
        "entryVariables": {
          "variables": {
            "list": [
              {
                "name": "toJSON",
                "type": "function",
                "value": {
                  "widgetType": "expression/encode-json",
                  "widgetData": {
                    "prettyPrint": {
                      "widgetType": "expression/checkbox-boolean",
                      "widgetData": {
                        "value": true
                      },
                      "code": "true"
                    },
                    "datetimeFormatter": {
                      "widgetType": "expression/format-datetime",
                      "widgetData": {
                        "pattern": {
                          "widgetType": "expression/datetime-pattern",
                          "widgetData": {
                            "value": "uuuu-MM-dd'T'HH:mm:ss.SSS[ZZZZZ]"
                          },
                          "code": "'uuuu-MM-dd''T''HH:mm:ss.SSS[ZZZZZ]'"
                        },
                        "locale": {
                          "widgetType": "expression/locale",
                          "widgetData": {
                            "value": "en-US"
                          },
                          "code": "'en-US'"
                        },
                        "nilValue": {
                          "widgetType": "expression/nil",
                          "widgetData": {},
                          "code": "nil"
                        },
                        "editor": {
                          "collapsed": true
                        },
                        "model": {}
                      },
                      "code": "let {\n  make_formatter: (string pattern, string locale, string nilValue) -> function via {:class 'com.twineworks.tweakstreet.library.conversion.Formatters$datetime_formatter'};\n}\nmake_formatter('uuuu-MM-dd''T''HH:mm:ss.SSS[ZZZZZ]', 'en-US', nil)\n"
                    },
                    "editor": {
                      "collapsed": true
                    },
                    "model": {}
                  },
                  "code": "let {\n  pretty_print: true;\n  datetime_formatter: let {\n  make_formatter: (string pattern, string locale, string nilValue) -> function via {:class 'com.twineworks.tweakstreet.library.conversion.Formatters$datetime_formatter'};\n}\nmake_formatter('uuuu-MM-dd''T''HH:mm:ss.SSS[ZZZZZ]', 'en-US', nil)\n;\n  make_encoder: (boolean pretty_print, function date_encoder, function binary_encoder) -> function via {:class 'com.twineworks.tweakstreet.library.json.Json$encoder'};\n}\nmake_encoder(pretty_print, datetime_formatter, nil)\n"
                }
              },
              {
                "name": "statement",
                "type": "string",
                "value": {
                  "widgetType": "expression/text",
                  "widgetData": {
                    "text": "UNWIND $steps AS step\n  MERGE (s:Step {type: split(step.type,\".\")[-1]})\n  with s, step\n  MATCH (c:Controlflow {name: $filename, path: $path})\n  MERGE (c)-[:uses]->(s)\n\n",
                    "size": {
                      "width": 0,
                      "height": 124
                    },
                    "syntax": "ruby",
                    "lineSeparator": "\n",
                    "interpolation": true
                  },
                  "code": "'UNWIND $steps AS step\n  MERGE (s:Step {type: split(step.type,\".\")[-1]})\n  with s, step\n  MATCH (c:Controlflow {name: $filename, path: $path})\n  MERGE (c)-[:uses]->(s)\n\n'"
                }
              },
              {
                "name": "parameters",
                "type": "any",
                "value": {
                  "widgetType": "expression/dict",
                  "widgetData": {
                    "table": {
                      "list": [
                        {
                          "key": {
                            "widgetType": "expression/string",
                            "widgetData": {
                              "interpolation": true,
                              "text": "steps"
                            },
                            "code": "'steps'"
                          },
                          "value": {
                            "widgetType": "expression/field-value-ref",
                            "widgetData": {
                              "fieldSelect": {
                                "value": {
                                  "gate": "in",
                                  "name": "other_steps"
                                }
                              }
                            },
                            "code": "::in.other_steps"
                          }
                        },
                        {
                          "key": {
                            "widgetType": "expression/string",
                            "widgetData": {
                              "interpolation": true,
                              "text": "filename"
                            },
                            "code": "'filename'"
                          },
                          "value": {
                            "widgetType": "expression/field-value-ref",
                            "widgetData": {
                              "fieldSelect": {
                                "value": {
                                  "gate": "in",
                                  "name": "filename"
                                }
                              }
                            },
                            "code": "::in.filename"
                          }
                        },
                        {
                          "key": {
                            "widgetType": "expression/string",
                            "widgetData": {
                              "interpolation": true,
                              "text": "path"
                            },
                            "code": "'path'"
                          },
                          "value": {
                            "widgetType": "expression/field-value-ref",
                            "widgetData": {
                              "fieldSelect": {
                                "value": {
                                  "gate": "in",
                                  "name": "path_only"
                                }
                              }
                            },
                            "code": "::in.path_only"
                          }
                        }
                      ]
                    }
                  },
                  "code": "{\n  'steps' ::in.other_steps,\n  'filename' ::in.filename,\n  'path' ::in.path_only\n}"
                }
              }
            ]
          },
          "editor": {
            "collapsed": false
          }
        },
        "tabs": {},
        "method": {
          "widgetType": "expression/select",
          "widgetData": {
            "family": "expression/select/httpMethod",
            "value": "POST"
          },
          "code": "'POST'"
        },
        "url": {
          "widgetType": "expression/string",
          "widgetData": {
            "interpolation": true,
            "text": "http://localhost:7474/db/neo4j/tx/commit"
          },
          "code": "'http://localhost:7474/db/neo4j/tx/commit'"
        },
        "urlParameters": {
          "widgetType": "expression/data-grid",
          "widgetData": {
            "fields": [
              {
                "id": "name",
                "name": "name"
              },
              {
                "id": "value",
                "name": "value"
              }
            ],
            "gen": {
              "as": "rows",
              "of": "dict",
              "meta": false
            },
            "table": {
              "list": []
            }
          },
          "code": "[]"
        },
        "authUser": {
          "widgetType": "expression/string",
          "widgetData": {
            "interpolation": true,
            "text": "neo4j"
          },
          "code": "'neo4j'"
        },
        "authPassword": {
          "widgetType": "expression/password",
          "widgetData": {
            "text": "encrypted: DLdp/xMKY6XLOTdXgA4LcDQ1nOlouElbnBtcip+9ex+695hk1Q==",
            "encrypted": true
          },
          "code": "'encrypted: DLdp/xMKY6XLOTdXgA4LcDQ1nOlouElbnBtcip+9ex+695hk1Q=='"
        },
        "oauth": {
          "widgetType": "expression/oauth-ref",
          "widgetData": {
            "name": ""
          },
          "code": "nil"
        },
        "headers": {
          "widgetType": "expression/data-grid",
          "widgetData": {
            "fields": [
              {
                "id": "name",
                "name": "name"
              },
              {
                "id": "value",
                "name": "value"
              }
            ],
            "gen": {
              "as": "rows",
              "of": "dict",
              "meta": false
            },
            "table": {
              "list": []
            }
          },
          "code": "[]"
        },
        "cookies": {
          "widgetType": "expression/field-value-ref",
          "widgetData": {
            "fieldSelect": {
              "value": null
            }
          },
          "code": "nil"
        },
        "contentType": {
          "widgetType": "expression/select",
          "widgetData": {
            "family": "expression/select/httpContentType",
            "value": "application/json"
          },
          "code": "'application/json'"
        },
        "bodyParameters": {
          "widgetType": "expression/data-grid",
          "widgetData": {
            "fields": [
              {
                "id": "name",
                "name": "name"
              },
              {
                "id": "value",
                "name": "value"
              }
            ],
            "gen": {
              "as": "rows",
              "of": "dict",
              "meta": false
            },
            "table": {
              "list": []
            }
          },
          "code": "[]"
        },
        "body": {
          "widgetType": "expression/code",
          "widgetData": {
            "text": "vars.toJSON({\r\n  :statements [{\r\n    :statement vars.statement,\r\n    :parameters vars.parameters\r\n  }]\r\n})",
            "size": {
              "width": 0,
              "height": 135
            },
            "syntax": "tweakflow"
          },
          "code": "vars.toJSON({\r\n  :statements [{\r\n    :statement vars.statement,\r\n    :parameters vars.parameters\r\n  }]\r\n})"
        },
        "followRedirects": {
          "widgetType": "expression/checkbox-boolean",
          "widgetData": {
            "value": true
          },
          "code": "true"
        },
        "bodyCapture": {
          "widgetType": "expression/select",
          "widgetData": {
            "family": "com.twineworks.tweakstreet.library.steps.map.httprequest/bodyCapture",
            "value": "capture_string"
          },
          "code": "'capture_string'"
        },
        "saveAsFile": {
          "widgetType": "expression/local-file",
          "widgetData": {
            "interpolation": true,
            "text": "",
            "dialogIntent": "openFile"
          },
          "code": "''"
        },
        "resultVariables": {
          "variables": {
            "list": [
              {
                "name": "response",
                "type": "any",
                "value": {
                  "widgetType": "expression/result-ref",
                  "widgetData": {
                    "value": "::results.response_json"
                  },
                  "code": "::results.response_json"
                }
              },
              {
                "name": "ensure_success",
                "type": "any",
                "value": {
                  "widgetType": "expression/code",
                  "widgetData": {
                    "text": "if response[:errors] \n  throw [\"error importing steps\", response]\nelse\n  :ok",
                    "size": {
                      "width": 0,
                      "height": 101
                    },
                    "syntax": "tweakflow"
                  },
                  "code": "if response[:errors] \n  throw [\"error importing steps\", response]\nelse\n  :ok"
                }
              }
            ]
          },
          "editor": {
            "collapsed": false
          }
        },
        "outputFields": {
          "outputFields": {
            "list": []
          },
          "editor": {
            "collapsed": false
          }
        },
        "editor": {
          "showEntryVariables": true,
          "showResultVariables": true,
          "showOutputFields": true,
          "dialogWidth": "stretch"
        },
        "model": {}
      },
      "pos": {
        "x": 922,
        "y": 122
      }
    },
    {
      "id": "com.twineworks.tweakstreet.library.steps.map.httprequest_1996a64e-c2b4-4657-900b-33b788ec7222",
      "name": "Neo4j: merge Runflow Controlflows and Controlflows",
      "type": "com.twineworks.tweakstreet.library.steps.map.httprequest",
      "instanceCount": {
        "widgetType": "expression/number",
        "widgetData": {
          "text": "1"
        },
        "code": "1"
      },
      "data": {
        "meta": {
          "name": "Neo4j: merge Runflow Controlflows and Controlflows",
          "showingComment": true,
          "comment": {
            "markdown": {
              "text": {
                "text": "",
                "syntax": "markdown",
                "size": {
                  "width": "100%",
                  "height": "100%"
                }
              },
              "size": {
                "width": null,
                "height": 160
              },
              "view": "edit"
            },
            "editor": {
              "collapsed": true
            }
          }
        },
        "entryVariables": {
          "variables": {
            "list": [
              {
                "name": "toJSON",
                "type": "function",
                "value": {
                  "widgetType": "expression/encode-json",
                  "widgetData": {
                    "prettyPrint": {
                      "widgetType": "expression/checkbox-boolean",
                      "widgetData": {
                        "value": true
                      },
                      "code": "true"
                    },
                    "datetimeFormatter": {
                      "widgetType": "expression/format-datetime",
                      "widgetData": {
                        "pattern": {
                          "widgetType": "expression/datetime-pattern",
                          "widgetData": {
                            "value": "uuuu-MM-dd'T'HH:mm:ss.SSS[ZZZZZ]"
                          },
                          "code": "'uuuu-MM-dd''T''HH:mm:ss.SSS[ZZZZZ]'"
                        },
                        "locale": {
                          "widgetType": "expression/locale",
                          "widgetData": {
                            "value": "en-US"
                          },
                          "code": "'en-US'"
                        },
                        "nilValue": {
                          "widgetType": "expression/nil",
                          "widgetData": {},
                          "code": "nil"
                        },
                        "editor": {
                          "collapsed": true
                        },
                        "model": {}
                      },
                      "code": "let {\n  make_formatter: (string pattern, string locale, string nilValue) -> function via {:class 'com.twineworks.tweakstreet.library.conversion.Formatters$datetime_formatter'};\n}\nmake_formatter('uuuu-MM-dd''T''HH:mm:ss.SSS[ZZZZZ]', 'en-US', nil)\n"
                    },
                    "editor": {
                      "collapsed": true
                    },
                    "model": {}
                  },
                  "code": "let {\n  pretty_print: true;\n  datetime_formatter: let {\n  make_formatter: (string pattern, string locale, string nilValue) -> function via {:class 'com.twineworks.tweakstreet.library.conversion.Formatters$datetime_formatter'};\n}\nmake_formatter('uuuu-MM-dd''T''HH:mm:ss.SSS[ZZZZZ]', 'en-US', nil)\n;\n  make_encoder: (boolean pretty_print, function date_encoder, function binary_encoder) -> function via {:class 'com.twineworks.tweakstreet.library.json.Json$encoder'};\n}\nmake_encoder(pretty_print, datetime_formatter, nil)\n"
                }
              },
              {
                "name": "statement",
                "type": "string",
                "value": {
                  "widgetType": "expression/text",
                  "widgetData": {
                    "text": "UNWIND $steps AS step\n  MERGE (s:Step {type: split(step.type,\".\")[-1]})\n  with s, step\n  MATCH (c:Controlflow {name: $filename, path: $path})\n  MATCH (cc:Controlflow {name: split(step.data.flowPath.widgetData.text,\"/\")[-1], path: step.data.flowPath.widgetData.path})\n  MERGE (s)-[:uses]->(cc)\n",
                    "size": {
                      "width": 0,
                      "height": 147
                    },
                    "syntax": "ruby",
                    "lineSeparator": "\n",
                    "interpolation": true
                  },
                  "code": "'UNWIND $steps AS step\n  MERGE (s:Step {type: split(step.type,\".\")[-1]})\n  with s, step\n  MATCH (c:Controlflow {name: $filename, path: $path})\n  MATCH (cc:Controlflow {name: split(step.data.flowPath.widgetData.text,\"/\")[-1], path: step.data.flowPath.widgetData.path})\n  MERGE (s)-[:uses]->(cc)\n'"
                }
              },
              {
                "name": "parameters",
                "type": "any",
                "value": {
                  "widgetType": "expression/dict",
                  "widgetData": {
                    "table": {
                      "list": [
                        {
                          "key": {
                            "widgetType": "expression/string",
                            "widgetData": {
                              "interpolation": true,
                              "text": "steps"
                            },
                            "code": "'steps'"
                          },
                          "value": {
                            "widgetType": "expression/field-value-ref",
                            "widgetData": {
                              "fieldSelect": {
                                "value": {
                                  "gate": "in",
                                  "name": "runflow_steps"
                                }
                              }
                            },
                            "code": "::in.runflow_steps"
                          }
                        },
                        {
                          "key": {
                            "widgetType": "expression/string",
                            "widgetData": {
                              "interpolation": true,
                              "text": "filename"
                            },
                            "code": "'filename'"
                          },
                          "value": {
                            "widgetType": "expression/field-value-ref",
                            "widgetData": {
                              "fieldSelect": {
                                "value": {
                                  "gate": "in",
                                  "name": "filename"
                                }
                              }
                            },
                            "code": "::in.filename"
                          }
                        },
                        {
                          "key": {
                            "widgetType": "expression/string",
                            "widgetData": {
                              "interpolation": true,
                              "text": "path"
                            },
                            "code": "'path'"
                          },
                          "value": {
                            "widgetType": "expression/field-value-ref",
                            "widgetData": {
                              "fieldSelect": {
                                "value": {
                                  "gate": "in",
                                  "name": "path_only"
                                }
                              }
                            },
                            "code": "::in.path_only"
                          }
                        }
                      ]
                    }
                  },
                  "code": "{\n  'steps' ::in.runflow_steps,\n  'filename' ::in.filename,\n  'path' ::in.path_only\n}"
                }
              }
            ]
          },
          "editor": {
            "collapsed": false
          }
        },
        "tabs": {},
        "method": {
          "widgetType": "expression/select",
          "widgetData": {
            "family": "expression/select/httpMethod",
            "value": "POST"
          },
          "code": "'POST'"
        },
        "url": {
          "widgetType": "expression/string",
          "widgetData": {
            "interpolation": true,
            "text": "http://localhost:7474/db/neo4j/tx/commit"
          },
          "code": "'http://localhost:7474/db/neo4j/tx/commit'"
        },
        "urlParameters": {
          "widgetType": "expression/data-grid",
          "widgetData": {
            "fields": [
              {
                "id": "name",
                "name": "name"
              },
              {
                "id": "value",
                "name": "value"
              }
            ],
            "gen": {
              "as": "rows",
              "of": "dict",
              "meta": false
            },
            "table": {
              "list": []
            }
          },
          "code": "[]"
        },
        "authUser": {
          "widgetType": "expression/string",
          "widgetData": {
            "interpolation": true,
            "text": "neo4j"
          },
          "code": "'neo4j'"
        },
        "authPassword": {
          "widgetType": "expression/password",
          "widgetData": {
            "text": "encrypted: DLdp/xMKY6XLOTdXgA4LcDQ1nOlouElbnBtcip+9ex+695hk1Q==",
            "encrypted": true
          },
          "code": "'encrypted: DLdp/xMKY6XLOTdXgA4LcDQ1nOlouElbnBtcip+9ex+695hk1Q=='"
        },
        "oauth": {
          "widgetType": "expression/oauth-ref",
          "widgetData": {
            "name": ""
          },
          "code": "nil"
        },
        "headers": {
          "widgetType": "expression/data-grid",
          "widgetData": {
            "fields": [
              {
                "id": "name",
                "name": "name"
              },
              {
                "id": "value",
                "name": "value"
              }
            ],
            "gen": {
              "as": "rows",
              "of": "dict",
              "meta": false
            },
            "table": {
              "list": []
            }
          },
          "code": "[]"
        },
        "cookies": {
          "widgetType": "expression/field-value-ref",
          "widgetData": {
            "fieldSelect": {
              "value": null
            }
          },
          "code": "nil"
        },
        "contentType": {
          "widgetType": "expression/select",
          "widgetData": {
            "family": "expression/select/httpContentType",
            "value": "application/json"
          },
          "code": "'application/json'"
        },
        "bodyParameters": {
          "widgetType": "expression/data-grid",
          "widgetData": {
            "fields": [
              {
                "id": "name",
                "name": "name"
              },
              {
                "id": "value",
                "name": "value"
              }
            ],
            "gen": {
              "as": "rows",
              "of": "dict",
              "meta": false
            },
            "table": {
              "list": []
            }
          },
          "code": "[]"
        },
        "body": {
          "widgetType": "expression/code",
          "widgetData": {
            "text": "vars.toJSON({\r\n  :statements [{\r\n    :statement vars.statement,\r\n    :parameters vars.parameters\r\n  }]\r\n})",
            "size": {
              "width": 0,
              "height": 140
            },
            "syntax": "tweakflow"
          },
          "code": "vars.toJSON({\r\n  :statements [{\r\n    :statement vars.statement,\r\n    :parameters vars.parameters\r\n  }]\r\n})"
        },
        "followRedirects": {
          "widgetType": "expression/checkbox-boolean",
          "widgetData": {
            "value": true
          },
          "code": "true"
        },
        "bodyCapture": {
          "widgetType": "expression/select",
          "widgetData": {
            "family": "com.twineworks.tweakstreet.library.steps.map.httprequest/bodyCapture",
            "value": "capture_string"
          },
          "code": "'capture_string'"
        },
        "saveAsFile": {
          "widgetType": "expression/local-file",
          "widgetData": {
            "interpolation": true,
            "text": "",
            "dialogIntent": "openFile"
          },
          "code": "''"
        },
        "resultVariables": {
          "variables": {
            "list": [
              {
                "name": "response",
                "type": "any",
                "value": {
                  "widgetType": "expression/result-ref",
                  "widgetData": {
                    "value": "::results.response_json"
                  },
                  "code": "::results.response_json"
                }
              },
              {
                "name": "ensure_success",
                "type": "any",
                "value": {
                  "widgetType": "expression/code",
                  "widgetData": {
                    "text": "if response[:errors] \n  throw [\"error importing steps\", response]\nelse\n  :ok",
                    "size": {
                      "width": 0,
                      "height": 101
                    },
                    "syntax": "tweakflow"
                  },
                  "code": "if response[:errors] \n  throw [\"error importing steps\", response]\nelse\n  :ok"
                }
              }
            ]
          },
          "editor": {
            "collapsed": false
          }
        },
        "outputFields": {
          "outputFields": {
            "list": []
          },
          "editor": {
            "collapsed": false
          }
        },
        "editor": {
          "showEntryVariables": true,
          "showResultVariables": true,
          "showOutputFields": true,
          "dialogWidth": "stretch"
        },
        "model": {}
      },
      "pos": {
        "x": 922,
        "y": 618
      }
    },
    {
      "id": "com.twineworks.tweakstreet.features.core.steps.deserialize_9ff62ae8-2bea-4066-85b5-5c262f9e12f1",
      "name": "Deserialize",
      "type": "com.twineworks.tweakstreet.features.core.steps.deserialize",
      "instanceCount": {
        "widgetType": "expression/number",
        "widgetData": {
          "text": "1"
        },
        "code": "1"
      },
      "data": {
        "meta": {
          "name": "Deserialize",
          "showingComment": true,
          "comment": {
            "markdown": {
              "text": {
                "text": "##### INFO\n\nread the binary file that was produced in the first flow.",
                "syntax": "markdown",
                "size": {
                  "width": "100%",
                  "height": "100%"
                }
              },
              "size": {
                "width": null,
                "height": 160
              },
              "view": "edit"
            },
            "editor": {
              "collapsed": false
            }
          }
        },
        "entryVariables": {
          "variables": {
            "list": []
          },
          "editor": {
            "collapsed": false
          }
        },
        "readFields": {
          "readFields": {
            "list": [
              {
                "name": "path",
                "type": "string",
                "mapping": {
                  "widgetType": "expression/string",
                  "widgetData": {
                    "interpolation": true,
                    "text": "path"
                  },
                  "code": "'path'"
                },
                "conversion": {
                  "widgetType": "expression/nil",
                  "widgetData": {},
                  "code": "nil"
                }
              },
              {
                "name": "last_modified",
                "type": "datetime",
                "mapping": {
                  "widgetType": "expression/string",
                  "widgetData": {
                    "interpolation": true,
                    "text": "last_modified"
                  },
                  "code": "'last_modified'"
                },
                "conversion": {
                  "widgetType": "expression/nil",
                  "widgetData": {},
                  "code": "nil"
                }
              },
              {
                "name": "path_only",
                "type": "any",
                "mapping": {
                  "widgetType": "expression/string",
                  "widgetData": {
                    "interpolation": true,
                    "text": "path_only"
                  },
                  "code": "'path_only'"
                },
                "conversion": {
                  "widgetType": "expression/nil",
                  "widgetData": {},
                  "code": "nil"
                }
              },
              {
                "name": "filename",
                "type": "string",
                "mapping": {
                  "widgetType": "expression/string",
                  "widgetData": {
                    "interpolation": true,
                    "text": "filename"
                  },
                  "code": "'filename'"
                },
                "conversion": {
                  "widgetType": "expression/nil",
                  "widgetData": {},
                  "code": "nil"
                }
              },
              {
                "name": "isDataflow",
                "type": "any",
                "mapping": {
                  "widgetType": "expression/string",
                  "widgetData": {
                    "interpolation": true,
                    "text": "isDataflow"
                  },
                  "code": "'isDataflow'"
                },
                "conversion": {
                  "widgetType": "expression/nil",
                  "widgetData": {},
                  "code": "nil"
                }
              },
              {
                "name": "content",
                "type": "dict",
                "mapping": {
                  "widgetType": "expression/string",
                  "widgetData": {
                    "interpolation": true,
                    "text": "content"
                  },
                  "code": "'content'"
                },
                "conversion": {
                  "widgetType": "expression/nil",
                  "widgetData": {},
                  "code": "nil"
                }
              },
              {
                "name": "version",
                "type": "any",
                "mapping": {
                  "widgetType": "expression/string",
                  "widgetData": {
                    "interpolation": true,
                    "text": "version"
                  },
                  "code": "'version'"
                },
                "conversion": {
                  "widgetType": "expression/nil",
                  "widgetData": {},
                  "code": "nil"
                }
              },
              {
                "name": "steps",
                "type": "any",
                "mapping": {
                  "widgetType": "expression/string",
                  "widgetData": {
                    "interpolation": true,
                    "text": "steps"
                  },
                  "code": "'steps'"
                },
                "conversion": {
                  "widgetType": "expression/nil",
                  "widgetData": {},
                  "code": "nil"
                }
              },
              {
                "name": "runflow_steps",
                "type": "any",
                "mapping": {
                  "widgetType": "expression/string",
                  "widgetData": {
                    "interpolation": true,
                    "text": "runflow_steps"
                  },
                  "code": "'runflow_steps'"
                },
                "conversion": {
                  "widgetType": "expression/nil",
                  "widgetData": {},
                  "code": "nil"
                }
              },
              {
                "name": "other_steps",
                "type": "any",
                "mapping": {
                  "widgetType": "expression/string",
                  "widgetData": {
                    "interpolation": true,
                    "text": "other_steps"
                  },
                  "code": "'other_steps'"
                },
                "conversion": {
                  "widgetType": "expression/nil",
                  "widgetData": {},
                  "code": "nil"
                }
              },
              {
                "name": "number_of_steps",
                "type": "any",
                "mapping": {
                  "widgetType": "expression/string",
                  "widgetData": {
                    "interpolation": true,
                    "text": "number_of_steps"
                  },
                  "code": "'number_of_steps'"
                },
                "conversion": {
                  "widgetType": "expression/nil",
                  "widgetData": {},
                  "code": "nil"
                }
              },
              {
                "name": "unique_steps",
                "type": "any",
                "mapping": {
                  "widgetType": "expression/string",
                  "widgetData": {
                    "interpolation": true,
                    "text": "unique_steps"
                  },
                  "code": "'unique_steps'"
                },
                "conversion": {
                  "widgetType": "expression/nil",
                  "widgetData": {},
                  "code": "nil"
                }
              },
              {
                "name": "number_of_unique_steps",
                "type": "any",
                "mapping": {
                  "widgetType": "expression/string",
                  "widgetData": {
                    "interpolation": true,
                    "text": "number_of_unique_steps"
                  },
                  "code": "'number_of_unique_steps'"
                },
                "conversion": {
                  "widgetType": "expression/nil",
                  "widgetData": {},
                  "code": "nil"
                }
              },
              {
                "name": "services",
                "type": "any",
                "mapping": {
                  "widgetType": "expression/string",
                  "widgetData": {
                    "interpolation": true,
                    "text": "services"
                  },
                  "code": "'services'"
                },
                "conversion": {
                  "widgetType": "expression/nil",
                  "widgetData": {},
                  "code": "nil"
                }
              },
              {
                "name": "number_of_services",
                "type": "any",
                "mapping": {
                  "widgetType": "expression/string",
                  "widgetData": {
                    "interpolation": true,
                    "text": "number_of_services"
                  },
                  "code": "'number_of_services'"
                },
                "conversion": {
                  "widgetType": "expression/nil",
                  "widgetData": {},
                  "code": "nil"
                }
              },
              {
                "name": "unique_services",
                "type": "any",
                "mapping": {
                  "widgetType": "expression/string",
                  "widgetData": {
                    "interpolation": true,
                    "text": "unique_services"
                  },
                  "code": "'unique_services'"
                },
                "conversion": {
                  "widgetType": "expression/nil",
                  "widgetData": {},
                  "code": "nil"
                }
              },
              {
                "name": "number_of_unique_services",
                "type": "any",
                "mapping": {
                  "widgetType": "expression/string",
                  "widgetData": {
                    "interpolation": true,
                    "text": "number_of_unique_services"
                  },
                  "code": "'number_of_unique_services'"
                },
                "conversion": {
                  "widgetType": "expression/nil",
                  "widgetData": {},
                  "code": "nil"
                }
              }
            ]
          },
          "editor": {
            "collapsed": false
          }
        },
        "resultVariables": {
          "variables": {
            "list": []
          },
          "editor": {
            "collapsed": false
          }
        },
        "outputFields": {
          "outputFields": {
            "list": []
          },
          "editor": {
            "collapsed": false
          }
        },
        "fs": {
          "widgetType": "expression/storage-ref",
          "widgetData": {
            "name": ""
          },
          "code": "nil"
        },
        "file": {
          "widgetType": "expression/local-file",
          "widgetData": {
            "interpolation": true,
            "text": "./data/flows.bin",
            "dialogIntent": "openFile"
          },
          "code": "'./data/flows.bin'"
        },
        "editor": {
          "showEntryVariables": false,
          "showResultVariables": false,
          "showWriteFields": true,
          "showOutputFields": false
        },
        "model": {}
      },
      "pos": {
        "x": 138,
        "y": 122
      }
    },
    {
      "id": "com.twineworks.tweakstreet.library.steps.map.httprequest_2a7a3170-0f64-49b8-987c-1a5b93a062f6",
      "name": "Neo4j: merge Services and Controlflows",
      "type": "com.twineworks.tweakstreet.library.steps.map.httprequest",
      "instanceCount": {
        "widgetType": "expression/number",
        "widgetData": {
          "text": "1"
        },
        "code": "1"
      },
      "data": {
        "meta": {
          "name": "Neo4j: merge Services and Controlflows",
          "showingComment": true,
          "comment": {
            "markdown": {
              "text": {
                "text": "",
                "syntax": "markdown",
                "size": {
                  "width": "100%",
                  "height": "100%"
                }
              },
              "size": {
                "width": null,
                "height": 160
              },
              "view": "edit"
            },
            "editor": {
              "collapsed": true
            }
          }
        },
        "entryVariables": {
          "variables": {
            "list": [
              {
                "name": "toJSON",
                "type": "function",
                "value": {
                  "widgetType": "expression/encode-json",
                  "widgetData": {
                    "prettyPrint": {
                      "widgetType": "expression/checkbox-boolean",
                      "widgetData": {
                        "value": true
                      },
                      "code": "true"
                    },
                    "datetimeFormatter": {
                      "widgetType": "expression/format-datetime",
                      "widgetData": {
                        "pattern": {
                          "widgetType": "expression/datetime-pattern",
                          "widgetData": {
                            "value": "uuuu-MM-dd'T'HH:mm:ss.SSS[ZZZZZ]"
                          },
                          "code": "'uuuu-MM-dd''T''HH:mm:ss.SSS[ZZZZZ]'"
                        },
                        "locale": {
                          "widgetType": "expression/locale",
                          "widgetData": {
                            "value": "en-US"
                          },
                          "code": "'en-US'"
                        },
                        "nilValue": {
                          "widgetType": "expression/nil",
                          "widgetData": {},
                          "code": "nil"
                        },
                        "editor": {
                          "collapsed": true
                        },
                        "model": {}
                      },
                      "code": "let {\n  make_formatter: (string pattern, string locale, string nilValue) -> function via {:class 'com.twineworks.tweakstreet.library.conversion.Formatters$datetime_formatter'};\n}\nmake_formatter('uuuu-MM-dd''T''HH:mm:ss.SSS[ZZZZZ]', 'en-US', nil)\n"
                    },
                    "editor": {
                      "collapsed": true
                    },
                    "model": {}
                  },
                  "code": "let {\n  pretty_print: true;\n  datetime_formatter: let {\n  make_formatter: (string pattern, string locale, string nilValue) -> function via {:class 'com.twineworks.tweakstreet.library.conversion.Formatters$datetime_formatter'};\n}\nmake_formatter('uuuu-MM-dd''T''HH:mm:ss.SSS[ZZZZZ]', 'en-US', nil)\n;\n  make_encoder: (boolean pretty_print, function date_encoder, function binary_encoder) -> function via {:class 'com.twineworks.tweakstreet.library.json.Json$encoder'};\n}\nmake_encoder(pretty_print, datetime_formatter, nil)\n"
                }
              },
              {
                "name": "statement",
                "type": "string",
                "value": {
                  "widgetType": "expression/text",
                  "widgetData": {
                    "text": "UNWIND $services AS service\n  MATCH (c:Controlflow {name: $filename, path: $path})\n  MERGE (s:Service {category: service.category})\n  MERGE (c)-[:uses]->(s)",
                    "size": {
                      "width": 0,
                      "height": 111
                    },
                    "syntax": "ruby",
                    "lineSeparator": "\n",
                    "interpolation": true
                  },
                  "code": "'UNWIND $services AS service\n  MATCH (c:Controlflow {name: $filename, path: $path})\n  MERGE (s:Service {category: service.category})\n  MERGE (c)-[:uses]->(s)'"
                }
              },
              {
                "name": "parameters",
                "type": "any",
                "value": {
                  "widgetType": "expression/dict",
                  "widgetData": {
                    "table": {
                      "list": [
                        {
                          "key": {
                            "widgetType": "expression/string",
                            "widgetData": {
                              "interpolation": true,
                              "text": "filename"
                            },
                            "code": "'filename'"
                          },
                          "value": {
                            "widgetType": "expression/field-value-ref",
                            "widgetData": {
                              "fieldSelect": {
                                "value": {
                                  "gate": "in",
                                  "name": "filename"
                                }
                              }
                            },
                            "code": "::in.filename"
                          }
                        },
                        {
                          "key": {
                            "widgetType": "expression/string",
                            "widgetData": {
                              "interpolation": true,
                              "text": "path"
                            },
                            "code": "'path'"
                          },
                          "value": {
                            "widgetType": "expression/field-value-ref",
                            "widgetData": {
                              "fieldSelect": {
                                "value": {
                                  "gate": "in",
                                  "name": "path_only"
                                }
                              }
                            },
                            "code": "::in.path_only"
                          }
                        },
                        {
                          "key": {
                            "widgetType": "expression/string",
                            "widgetData": {
                              "interpolation": true,
                              "text": "services"
                            },
                            "code": "'services'"
                          },
                          "value": {
                            "widgetType": "expression/field-value-ref",
                            "widgetData": {
                              "fieldSelect": {
                                "value": {
                                  "gate": "in",
                                  "name": "services"
                                }
                              }
                            },
                            "code": "::in.services"
                          }
                        }
                      ]
                    }
                  },
                  "code": "{\n  'filename' ::in.filename,\n  'path' ::in.path_only,\n  'services' ::in.services\n}"
                }
              }
            ]
          },
          "editor": {
            "collapsed": false
          }
        },
        "tabs": {},
        "method": {
          "widgetType": "expression/select",
          "widgetData": {
            "family": "expression/select/httpMethod",
            "value": "POST"
          },
          "code": "'POST'"
        },
        "url": {
          "widgetType": "expression/string",
          "widgetData": {
            "interpolation": true,
            "text": "http://localhost:7474/db/neo4j/tx/commit"
          },
          "code": "'http://localhost:7474/db/neo4j/tx/commit'"
        },
        "urlParameters": {
          "widgetType": "expression/data-grid",
          "widgetData": {
            "fields": [
              {
                "id": "name",
                "name": "name"
              },
              {
                "id": "value",
                "name": "value"
              }
            ],
            "gen": {
              "as": "rows",
              "of": "dict",
              "meta": false
            },
            "table": {
              "list": []
            }
          },
          "code": "[]"
        },
        "authUser": {
          "widgetType": "expression/string",
          "widgetData": {
            "interpolation": true,
            "text": "neo4j"
          },
          "code": "'neo4j'"
        },
        "authPassword": {
          "widgetType": "expression/password",
          "widgetData": {
            "text": "encrypted: DLdp/xMKY6XLOTdXgA4LcDQ1nOlouElbnBtcip+9ex+695hk1Q==",
            "encrypted": true
          },
          "code": "'encrypted: DLdp/xMKY6XLOTdXgA4LcDQ1nOlouElbnBtcip+9ex+695hk1Q=='"
        },
        "oauth": {
          "widgetType": "expression/oauth-ref",
          "widgetData": {
            "name": ""
          },
          "code": "nil"
        },
        "headers": {
          "widgetType": "expression/data-grid",
          "widgetData": {
            "fields": [
              {
                "id": "name",
                "name": "name"
              },
              {
                "id": "value",
                "name": "value"
              }
            ],
            "gen": {
              "as": "rows",
              "of": "dict",
              "meta": false
            },
            "table": {
              "list": []
            }
          },
          "code": "[]"
        },
        "cookies": {
          "widgetType": "expression/field-value-ref",
          "widgetData": {
            "fieldSelect": {
              "value": null
            }
          },
          "code": "nil"
        },
        "contentType": {
          "widgetType": "expression/select",
          "widgetData": {
            "family": "expression/select/httpContentType",
            "value": "application/json"
          },
          "code": "'application/json'"
        },
        "bodyParameters": {
          "widgetType": "expression/data-grid",
          "widgetData": {
            "fields": [
              {
                "id": "name",
                "name": "name"
              },
              {
                "id": "value",
                "name": "value"
              }
            ],
            "gen": {
              "as": "rows",
              "of": "dict",
              "meta": false
            },
            "table": {
              "list": []
            }
          },
          "code": "[]"
        },
        "body": {
          "widgetType": "expression/code",
          "widgetData": {
            "text": "vars.toJSON({\r\n  :statements [{\r\n    :statement vars.statement,\r\n    :parameters vars.parameters\r\n  }]\r\n})",
            "size": {
              "width": 0,
              "height": 167
            },
            "syntax": "tweakflow"
          },
          "code": "vars.toJSON({\r\n  :statements [{\r\n    :statement vars.statement,\r\n    :parameters vars.parameters\r\n  }]\r\n})"
        },
        "followRedirects": {
          "widgetType": "expression/checkbox-boolean",
          "widgetData": {
            "value": true
          },
          "code": "true"
        },
        "bodyCapture": {
          "widgetType": "expression/select",
          "widgetData": {
            "family": "com.twineworks.tweakstreet.library.steps.map.httprequest/bodyCapture",
            "value": "capture_string"
          },
          "code": "'capture_string'"
        },
        "saveAsFile": {
          "widgetType": "expression/local-file",
          "widgetData": {
            "interpolation": true,
            "text": "",
            "dialogIntent": "openFile"
          },
          "code": "''"
        },
        "resultVariables": {
          "variables": {
            "list": [
              {
                "name": "response",
                "type": "any",
                "value": {
                  "widgetType": "expression/result-ref",
                  "widgetData": {
                    "value": "::results.response_json"
                  },
                  "code": "::results.response_json"
                }
              },
              {
                "name": "ensure_success",
                "type": "any",
                "value": {
                  "widgetType": "expression/code",
                  "widgetData": {
                    "text": "if response[:errors] \n  throw [\"error importing services\", response]\nelse\n  :ok",
                    "size": {
                      "width": 0,
                      "height": 101
                    },
                    "syntax": "tweakflow"
                  },
                  "code": "if response[:errors] \n  throw [\"error importing services\", response]\nelse\n  :ok"
                }
              }
            ]
          },
          "editor": {
            "collapsed": false
          }
        },
        "outputFields": {
          "outputFields": {
            "list": []
          },
          "editor": {
            "collapsed": false
          }
        },
        "editor": {
          "showEntryVariables": true,
          "showResultVariables": true,
          "showOutputFields": true,
          "dialogWidth": "wide"
        },
        "model": {}
      },
      "pos": {
        "x": 922,
        "y": 282
      }
    }
  ],
  "hops": [
    {
      "id": "9d57e61b-383d-4f96-889f-f344373103ff",
      "fromStep": "com.twineworks.tweakstreet.library.steps.map.httprequest_cfb63c64-b788-429f-80e7-f6f5b2e2c536",
      "toStep": "com.twineworks.tweakstreet.library.steps.map.httprequest_1996a64e-c2b4-4657-900b-33b788ec7222",
      "fromGate": "out",
      "toGate": "in",
      "disabled": false,
      "partitioner": {
        "widgetType": "expression/code",
        "widgetData": {
          "text": ""
        },
        "code": "nil"
      }
    },
    {
      "id": "d9fb3ca2-9cd1-4966-a620-52985136254d",
      "fromStep": "com.twineworks.tweakstreet.features.core.steps.deserialize_9ff62ae8-2bea-4066-85b5-5c262f9e12f1",
      "toStep": "com.twineworks.tweakstreet.library.steps.bool.filter_9014af37-436e-4bd0-8617-6bccab651df6",
      "fromGate": "out",
      "toGate": "in",
      "disabled": false,
      "partitioner": {
        "widgetType": "expression/code",
        "widgetData": {
          "text": ""
        },
        "code": "nil"
      }
    },
    {
      "id": "5b349614-fa40-441d-8c7f-66ffdf80be73",
      "fromStep": "com.twineworks.tweakstreet.library.steps.map.httprequest_46e2bde8-b0f6-4d89-89e8-2844a42e6bed",
      "toStep": "com.twineworks.tweakstreet.library.steps.map.httprequest_2a7a3170-0f64-49b8-987c-1a5b93a062f6",
      "fromGate": "out",
      "toGate": "in",
      "disabled": false,
      "partitioner": {
        "widgetType": "expression/code",
        "widgetData": {
          "text": ""
        },
        "code": "nil"
      }
    },
    {
      "id": "4d9e32bb-90bf-4265-bdb9-51b4a9ee6f19",
      "fromStep": "com.twineworks.tweakstreet.library.steps.map.httprequest_2a7a3170-0f64-49b8-987c-1a5b93a062f6",
      "toStep": "com.twineworks.tweakstreet.library.steps.map.httprequest_cfb63c64-b788-429f-80e7-f6f5b2e2c536",
      "fromGate": "out",
      "toGate": "in",
      "disabled": false,
      "partitioner": {
        "widgetType": "expression/code",
        "widgetData": {
          "text": ""
        },
        "code": "nil"
      }
    },
    {
      "id": "ccff2365-68fb-4972-86eb-b36b48805655",
      "fromStep": "com.twineworks.tweakstreet.library.steps.bool.filter_9014af37-436e-4bd0-8617-6bccab651df6",
      "toStep": "com.twineworks.tweakstreet.library.steps.map.httprequest_c9cbaf2e-55da-4165-9757-43e7c0ac201d",
      "fromGate": "yes",
      "toGate": "in",
      "disabled": false,
      "partitioner": {
        "widgetType": "expression/code",
        "widgetData": {
          "text": ""
        },
        "code": "nil"
      }
    },
    {
      "id": "13c22f09-086d-4f2a-a6b3-3e28330f2e62",
      "fromStep": "com.twineworks.tweakstreet.library.steps.map.httprequest_c9cbaf2e-55da-4165-9757-43e7c0ac201d",
      "toStep": "com.twineworks.tweakstreet.library.steps.map.httprequest_46e2bde8-b0f6-4d89-89e8-2844a42e6bed",
      "fromGate": "out",
      "toGate": "in",
      "disabled": false,
      "partitioner": {
        "widgetType": "expression/code",
        "widgetData": {
          "text": ""
        },
        "code": "nil"
      }
    }
  ]
}